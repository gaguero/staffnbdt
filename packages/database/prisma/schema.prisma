datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

model Organization {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  logoUrl     String?
  website     String?
  contactEmail String?
  contactPhone String?
  address     Json?     // Structured address object
  timezone    String    @default("UTC")
  settings    Json?     // Organization-level settings
  branding    Json?     // Branding configuration
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  properties  Property[]
  users       User[]
  moduleSubscriptions ModuleSubscription[]
  
  @@index([slug])
  @@index([isActive])
}

model Property {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  name           String
  slug           String
  description    String?
  propertyType   PropertyType @default(HOTEL)
  address        Json?        // Structured address object
  timezone       String       @default("UTC")
  phoneNumber    String?
  email          String?
  website        String?
  settings       Json?        // Property-specific settings
  branding       Json?        // Property-specific branding overrides
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?

  users          User[]
  departments    Department[]
  documents      Document[]
  payslips       Payslip[]
  vacations      Vacation[]
  trainingSessions TrainingSession[]
  commercialBenefits CommercialBenefit[]
  notifications  Notification[]
  invitations    Invitation[]
  auditLogs      AuditLog[]
  
  // Core platform relations
  units          Unit[]
  guests         Guest[]
  reservations   Reservation[]
  tasks          Task[]
  
  @@unique([organizationId, slug])
  @@index([organizationId])
  @@index([isActive])
}

enum PropertyType {
  HOTEL
  RESORT
  BOUTIQUE_HOTEL
  CHAIN_HOTEL
  MOTEL
  BNB
  HOSTEL
  APARTMENT
  VILLA
  OTHER
}

model ModuleSubscription {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  moduleName     String       // HR, FRONT_DESK, HOUSEKEEPING, etc.
  isEnabled      Boolean      @default(true)
  enabledAt      DateTime?
  disabledAt     DateTime?
  settings       Json?        // Module-specific settings
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@unique([organizationId, moduleName])
  @@index([organizationId])
  @@index([moduleName])
}

model TenantSettings {
  id             String    @id @default(cuid())
  organizationId String?
  propertyId     String?
  key            String
  value          Json
  category       String?   // branding, features, integrations, etc.
  description    String?
  isPublic       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  @@unique([organizationId, propertyId, key])
  @@index([organizationId])
  @@index([propertyId])
  @@index([category])
}

model User {
  id               String       @id @default(cuid())
  email            String       @unique
  password         String?      // Hashed password, nullable for magic-link only users
  firstName        String
  lastName         String
  role             Role
  organizationId   String?      // Make nullable for gradual migration
  organization     Organization? @relation(fields: [organizationId], references: [id])
  propertyId       String?
  property         Property?    @relation(fields: [propertyId], references: [id])
  departmentId     String?
  department       Department?  @relation(fields: [departmentId], references: [id])
  position         String?
  hireDate         DateTime?
  phoneNumber      String?
  emergencyContact Json?
  idDocument       String?      // Encrypted
  profilePhoto     String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  deletedAt        DateTime?
  
  documents        Document[]
  payslips         Payslip[]
  vacations        Vacation[]
  enrollments      Enrollment[]
  notifications    Notification[]
  auditLogs        AuditLog[]
  invitationsSent  Invitation[] @relation("InvitedBy")
  invitationsAccepted Invitation[] @relation("AcceptedBy")
  managedDepartments Department[] @relation("DepartmentManager")
  
  // Task relations
  assignedTasks    Task[]
  createdTasks     Task[]       @relation("CreatedTasks")
  completedTasks   Task[]       @relation("CompletedTasks")
  
  @@index([organizationId])
  @@index([propertyId])
  @@index([departmentId])
}

enum Role {
  PLATFORM_ADMIN      // Manages entire platform, all tenants
  ORGANIZATION_OWNER  // Manages hotel chain/group
  ORGANIZATION_ADMIN  // Manages organization settings
  PROPERTY_MANAGER    // Manages individual hotel property
  DEPARTMENT_ADMIN    // Manages department within property
  STAFF              // Self-service access to own resources
}

model Department {
  id          String     @id @default(cuid())
  name        String
  description String?
  location    String?
  budget      Decimal?   @db.Decimal(12, 2)
  propertyId  String?    // Make nullable for gradual migration
  property    Property?  @relation(fields: [propertyId], references: [id])
  managerId   String?
  manager     User?      @relation("DepartmentManager", fields: [managerId], references: [id])
  parentId    String?
  parent      Department? @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children    Department[] @relation("DepartmentHierarchy")
  level       Int        @default(0)
  users       User[]
  documents   Document[]
  invitations Invitation[]
  trainingSessions TrainingSession[]
  tasks       Task[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // @@unique([propertyId, name]) // Temporarily disabled during migration
  @@index([propertyId])
  @@index([parentId])
  @@index([level])
}

model Document {
  id           String       @id @default(cuid())
  title        String
  description  String?
  fileUrl      String?      // Legacy field for backwards compatibility
  fileKey      String?      // New field for local storage file paths
  fileSize     Int
  mimeType     String
  scope        DocumentScope
  propertyId   String?      // Make nullable for gradual migration
  property     Property?    @relation(fields: [propertyId], references: [id])
  departmentId String?
  department   Department?  @relation(fields: [departmentId], references: [id])
  userId       String?
  user         User?        @relation(fields: [userId], references: [id])
  uploadedBy   String
  tags         String[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?
  
  @@index([propertyId])
  @@index([departmentId])
  @@index([scope])
}

enum DocumentScope {
  GENERAL
  DEPARTMENT
  USER
}

model Payslip {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  propertyId   String?  // Make nullable for gradual migration
  property     Property? @relation(fields: [propertyId], references: [id])
  period       String   // "2024-01"
  grossSalary  Decimal  @db.Decimal(10, 2)
  deductions   Json
  netSalary    Decimal  @db.Decimal(10, 2)
  currency     String   @default("USD")
  pdfUrl       String?  // Legacy field for backwards compatibility
  fileKey      String?  // New field for local storage file paths
  importBatch  String?  // For tracking CSV imports
  createdAt    DateTime @default(now())
  viewedAt     DateTime?
  
  // @@unique([userId, period, propertyId]) // Temporarily disabled during migration
  @@unique([userId, period]) // Keep original constraint for now
  @@index([propertyId])
  @@index([period])
  @@index([importBatch])
}

model Vacation {
  id             String         @id @default(cuid())
  userId         String
  user           User           @relation(fields: [userId], references: [id])
  propertyId     String?        // Make nullable for gradual migration
  property       Property?      @relation(fields: [propertyId], references: [id])
  type           VacationType
  startDate      DateTime
  endDate        DateTime
  reason         String?
  status         VacationStatus @default(PENDING)
  approvedBy     String?
  approvedAt     DateTime?
  rejectedReason String?
  attachments    String[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  @@index([propertyId])
  @@index([userId, status])
  @@index([startDate, endDate])
}

enum VacationType {
  ANNUAL
  SICK
  PERSONAL
  UNPAID
}

enum VacationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model TrainingSession {
  id           String      @id @default(cuid())
  title        String
  description  String
  category     String
  version      Int         @default(1)
  isActive     Boolean     @default(true)
  passingScore Int?
  duration     Int?        // in minutes
  contentBlocks Json       // Array of content blocks
  propertyId   String?     // Make nullable for gradual migration
  property     Property?   @relation(fields: [propertyId], references: [id])
  departmentId String?     // Optional department-specific training
  department   Department? @relation(fields: [departmentId], references: [id])
  createdBy    String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  enrollments  Enrollment[]
  
  // @@unique([propertyId, title, version]) // Temporarily disabled during migration
  @@unique([title, version]) // Keep original constraint for now
  @@index([propertyId])
  @@index([isActive])
  @@index([departmentId])
}

model Enrollment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  sessionId     String
  session       TrainingSession @relation(fields: [sessionId], references: [id])
  status        EnrollmentStatus @default(IN_PROGRESS)
  progress      Json      // Track which blocks viewed
  answers       Json?     // Store quiz answers
  score         Int?
  completedAt   DateTime?
  certificateUrl String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([userId, sessionId])
  @@index([status])
}

enum EnrollmentStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}

model CommercialBenefit {
  id           String    @id @default(cuid())
  partnerName  String
  category     String
  description  String    @db.Text
  discount     String
  imageUrl     String?
  websiteUrl   String?
  contactInfo  String?
  propertyId   String?   // Make nullable for gradual migration
  property     Property? @relation(fields: [propertyId], references: [id])
  validFrom    DateTime?
  validUntil   DateTime?
  isActive     Boolean   @default(true)
  terms        String?   @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@index([propertyId])
  @@index([isActive, category])
}

model Notification {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  propertyId   String?   // Make nullable for gradual migration
  property     Property? @relation(fields: [propertyId], references: [id])
  type         String
  title        String
  message      String    @db.Text
  data         Json?
  read         Boolean   @default(false)
  readAt       DateTime?
  createdAt    DateTime  @default(now())
  
  @@index([propertyId])
  @@index([userId, read])
  @@index([createdAt])
}

model Invitation {
  id           String           @id @default(cuid())
  email        String
  token        String           @unique
  role         Role
  propertyId   String?          // Make nullable for gradual migration
  property     Property?        @relation(fields: [propertyId], references: [id])
  departmentId String?
  department   Department?      @relation(fields: [departmentId], references: [id])
  invitedBy    String
  invitedByUser User            @relation("InvitedBy", fields: [invitedBy], references: [id])
  status       InvitationStatus @default(PENDING)
  expiresAt    DateTime
  acceptedAt   DateTime?
  acceptedBy   String?          // User ID when accepted
  acceptedUser User?            @relation("AcceptedBy", fields: [acceptedBy], references: [id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  
  // @@unique([propertyId, email, status]) // Temporarily disabled during migration
  @@unique([email, status]) // Keep original constraint for now
  @@index([propertyId])
  @@index([status])
  @@index([expiresAt])
  @@index([invitedBy])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

model AuditLog {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  propertyId   String?   // Make nullable for gradual migration
  property     Property? @relation(fields: [propertyId], references: [id])
  action       String
  entity       String
  entityId     String
  oldData      Json?
  newData      Json?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime  @default(now())
  
  @@index([propertyId])
  @@index([userId])
  @@index([entity, entityId])
  @@index([createdAt])
}

// Core Platform Models for Hotel Operations

model Unit {
  id           String        @id @default(cuid())
  propertyId   String
  property     Property      @relation(fields: [propertyId], references: [id])
  unitNumber   String
  unitType     UnitType      @default(STANDARD)
  building     String?
  floor        Int?
  bedrooms     Int           @default(1)
  bathrooms    Int           @default(1)
  maxOccupancy Int           @default(2)
  size         Decimal?      @db.Decimal(8, 2) // Square feet/meters
  amenities    String[]      // WiFi, AC, Balcony, etc.
  status       UnitStatus    @default(AVAILABLE)
  isActive     Boolean       @default(true)
  description  String?
  notes        String?
  dailyRate    Decimal?      @db.Decimal(10, 2)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  
  reservations Reservation[]
  tasks        Task[]        @relation("UnitTasks")
  
  @@unique([propertyId, unitNumber])
  @@index([propertyId])
  @@index([status])
  @@index([isActive])
  @@index([building, floor])
}

enum UnitType {
  STANDARD
  DELUXE
  SUITE
  PRESIDENTIAL
  FAMILY
  ACCESSIBLE
  STUDIO
  APARTMENT
  VILLA
  OTHER
}

enum UnitStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  CLEANING
  OUT_OF_ORDER
  RESERVED
}

model Guest {
  id              String        @id @default(cuid())
  propertyId      String
  property        Property      @relation(fields: [propertyId], references: [id])
  firstName       String
  lastName        String
  email           String?
  phoneNumber     String?
  nationality     String?
  dateOfBirth     DateTime?
  passportNumber  String?
  idNumber        String?
  address         Json?         // Structured address object
  preferences     Json?         // Dietary, room preferences, etc.
  vipStatus       VipStatus     @default(STANDARD)
  notes           String?
  blacklisted     Boolean       @default(false)
  blacklistReason String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
  
  reservations    Reservation[]
  
  @@index([propertyId])
  @@index([email])
  @@index([phoneNumber])
  @@index([vipStatus])
  @@index([blacklisted])
}

enum VipStatus {
  STANDARD
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

model Reservation {
  id             String            @id @default(cuid())
  propertyId     String
  property       Property          @relation(fields: [propertyId], references: [id])
  unitId         String
  unit           Unit              @relation(fields: [unitId], references: [id])
  guestId        String
  guest          Guest             @relation(fields: [guestId], references: [id])
  reservationNumber String         @unique
  checkInDate    DateTime
  checkOutDate   DateTime
  adults         Int               @default(1)
  children       Int               @default(0)
  status         ReservationStatus @default(CONFIRMED)
  totalAmount    Decimal           @db.Decimal(10, 2)
  paidAmount     Decimal           @default(0) @db.Decimal(10, 2)
  currency       String            @default("USD")
  paymentStatus  PaymentStatus     @default(PENDING)
  paymentMethod  String?
  specialRequests String?
  notes          String?
  source         String?           // Booking.com, Direct, etc.
  confirmationCode String?
  checkedInAt    DateTime?
  checkedOutAt   DateTime?
  checkedInBy    String?           // User ID
  checkedOutBy   String?           // User ID
  cancelledAt    DateTime?
  cancelledBy    String?           // User ID
  cancellationReason String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  
  tasks          Task[]            @relation("ReservationTasks")
  
  @@index([propertyId])
  @@index([unitId])
  @@index([guestId])
  @@index([status])
  @@index([checkInDate, checkOutDate])
  @@index([reservationNumber])
  @@index([paymentStatus])
}

enum ReservationStatus {
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  REFUNDED
  CANCELLED
}

model Task {
  id               String       @id @default(cuid())
  propertyId       String
  property         Property     @relation(fields: [propertyId], references: [id])
  title            String
  description      String?
  taskType         TaskType
  priority         TaskPriority @default(MEDIUM)
  status           TaskStatus   @default(PENDING)
  assignedToId     String?
  assignedTo       User?        @relation(fields: [assignedToId], references: [id])
  departmentId     String?
  department       Department?  @relation(fields: [departmentId], references: [id])
  relatedEntity    String?      // unit, reservation, guest, etc.
  relatedId        String?      // ID of related entity
  unitId           String?      // Direct relation to unit
  unit             Unit?        @relation("UnitTasks", fields: [unitId], references: [id])
  reservationId    String?      // Direct relation to reservation
  reservation      Reservation? @relation("ReservationTasks", fields: [reservationId], references: [id])
  dueDate          DateTime?
  completedAt      DateTime?
  completedBy      String?      // User ID
  completedByUser  User?        @relation("CompletedTasks", fields: [completedBy], references: [id])
  estimatedTime    Int?         // Minutes
  actualTime       Int?         // Minutes
  attachments      String[]     // File URLs
  notes            String?
  createdBy        String
  createdByUser    User         @relation("CreatedTasks", fields: [createdBy], references: [id])
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  @@index([propertyId])
  @@index([taskType])
  @@index([status])
  @@index([priority])
  @@index([assignedToId])
  @@index([departmentId])
  @@index([dueDate])
  @@index([unitId])
  @@index([reservationId])
  @@index([relatedEntity, relatedId])
}

enum TaskType {
  MAINTENANCE
  HOUSEKEEPING
  FRONT_DESK
  GUEST_REQUEST
  INSPECTION
  REPAIR
  PREVENTIVE
  CLEANING
  CHECKIN
  CHECKOUT
  OTHER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}