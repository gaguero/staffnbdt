datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  firstName        String
  lastName         String
  role             Role
  departmentId     String?
  department       Department? @relation(fields: [departmentId], references: [id])
  position         String?
  hireDate         DateTime?
  phoneNumber      String?
  emergencyContact Json?
  idDocument       String?   // Encrypted
  profilePhoto     String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
  
  documents        Document[]
  payslips         Payslip[]
  vacations        Vacation[]
  enrollments      Enrollment[]
  notifications    Notification[]
  auditLogs        AuditLog[]
}

enum Role {
  SUPERADMIN
  DEPARTMENT_ADMIN
  STAFF
}

model Department {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  users       User[]
  documents   Document[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Document {
  id           String    @id @default(cuid())
  title        String
  description  String?
  fileUrl      String?   // Legacy field for backwards compatibility
  fileKey      String?   // New field for local storage file paths
  fileSize     Int
  mimeType     String
  scope        DocumentScope
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  userId       String?
  user         User?     @relation(fields: [userId], references: [id])
  uploadedBy   String
  tags         String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}

enum DocumentScope {
  GENERAL
  DEPARTMENT
  USER
}

model Payslip {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  period       String    // "2024-01"
  grossSalary  Decimal   @db.Decimal(10, 2)
  deductions   Json
  netSalary    Decimal   @db.Decimal(10, 2)
  currency     String    @default("USD")
  pdfUrl       String?   // Legacy field for backwards compatibility
  fileKey      String?   // New field for local storage file paths
  importBatch  String?   // For tracking CSV imports
  createdAt    DateTime  @default(now())
  viewedAt     DateTime?
  
  @@unique([userId, period])
  @@index([period])
  @@index([importBatch])
}

model Vacation {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  type           VacationType
  startDate      DateTime
  endDate        DateTime
  reason         String?
  status         VacationStatus @default(PENDING)
  approvedBy     String?
  approvedAt     DateTime?
  rejectedReason String?
  attachments    String[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  @@index([userId, status])
  @@index([startDate, endDate])
}

enum VacationType {
  ANNUAL
  SICK
  PERSONAL
  UNPAID
}

enum VacationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model TrainingSession {
  id           String    @id @default(cuid())
  title        String
  description  String
  category     String
  version      Int       @default(1)
  isActive     Boolean   @default(true)
  passingScore Int?
  duration     Int?      // in minutes
  contentBlocks Json     // Array of content blocks
  createdBy    String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  enrollments  Enrollment[]
  
  @@unique([title, version])
  @@index([isActive])
}

model Enrollment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  sessionId     String
  session       TrainingSession @relation(fields: [sessionId], references: [id])
  status        EnrollmentStatus @default(IN_PROGRESS)
  progress      Json      // Track which blocks viewed
  answers       Json?     // Store quiz answers
  score         Int?
  completedAt   DateTime?
  certificateUrl String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([userId, sessionId])
  @@index([status])
}

enum EnrollmentStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}

model CommercialBenefit {
  id           String    @id @default(cuid())
  partnerName  String
  category     String
  description  String    @db.Text
  discount     String
  imageUrl     String?
  websiteUrl   String?
  contactInfo  String?
  validFrom    DateTime?
  validUntil   DateTime?
  isActive     Boolean   @default(true)
  terms        String?   @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@index([isActive, category])
}

model Notification {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  type         String
  title        String
  message      String    @db.Text
  data         Json?
  read         Boolean   @default(false)
  readAt       DateTime?
  createdAt    DateTime  @default(now())
  
  @@index([userId, read])
  @@index([createdAt])
}

model AuditLog {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  action       String
  entity       String
  entityId     String
  oldData      Json?
  newData      Json?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime  @default(now())
  
  @@index([userId])
  @@index([entity, entityId])
  @@index([createdAt])
}