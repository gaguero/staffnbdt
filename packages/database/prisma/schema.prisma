datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

model Organization {
  id           String    @id @default(cuid())
  name         String
  slug         String    @unique
  description  String?
  logoUrl      String?
  website      String?
  contactEmail String?
  contactPhone String?
  address      Json? // Structured address object
  timezone     String    @default("UTC")
  settings     Json? // Organization-level settings
  branding     Json? // Branding configuration
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  properties          Property[]
  users               User[]
  moduleSubscriptions ModuleSubscription[]
  customRoles         CustomRole[]

  @@index([slug])
  @@index([isActive])
}

model Property {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  name           String
  slug           String
  description    String?
  propertyType   PropertyType @default(HOTEL)
  address        Json? // Structured address object
  timezone       String       @default("UTC")
  phoneNumber    String?
  email          String?
  website        String?
  settings       Json? // Property-specific settings
  branding       Json? // Property-specific branding overrides
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?

  users              User[]
  departments        Department[]
  documents          Document[]
  payslips           Payslip[]
  vacations          Vacation[]
  trainingSessions   TrainingSession[]
  commercialBenefits CommercialBenefit[]
  notifications      Notification[]
  invitations        Invitation[]
  auditLogs          AuditLog[]

  // Core platform relations
  units        Unit[]
  guests       Guest[]
  reservations Reservation[]
  tasks        Task[]
  customRoles  CustomRole[]

  @@unique([organizationId, slug])
  @@index([organizationId])
  @@index([isActive])
}

enum PropertyType {
  HOTEL
  RESORT
  BOUTIQUE_HOTEL
  CHAIN_HOTEL
  MOTEL
  BNB
  HOSTEL
  APARTMENT
  VILLA
  OTHER
}

model ModuleSubscription {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  moduleName     String // HR, FRONT_DESK, HOUSEKEEPING, etc.
  isEnabled      Boolean      @default(true)
  enabledAt      DateTime?
  disabledAt     DateTime?
  settings       Json? // Module-specific settings
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([organizationId, moduleName])
  @@index([organizationId])
  @@index([moduleName])
}

model TenantSettings {
  id             String   @id @default(cuid())
  organizationId String?
  propertyId     String?
  key            String
  value          Json
  category       String? // branding, features, integrations, etc.
  description    String?
  isPublic       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([organizationId, propertyId, key])
  @@index([organizationId])
  @@index([propertyId])
  @@index([category])
}

model User {
  id               String        @id @default(cuid())
  email            String        @unique
  password         String? // Hashed password, nullable for magic-link only users
  firstName        String
  lastName         String
  role             Role // Legacy role enum - kept for backwards compatibility
  organizationId   String? // Make nullable for gradual migration
  organization     Organization? @relation(fields: [organizationId], references: [id])
  propertyId       String?
  property         Property?     @relation(fields: [propertyId], references: [id])
  departmentId     String?
  department       Department?   @relation(fields: [departmentId], references: [id])
  position         String?
  hireDate         DateTime?
  phoneNumber      String?
  emergencyContact Json?
  idDocument       String? // Encrypted
  profilePhoto     String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deletedAt        DateTime?

  documents           Document[]
  payslips            Payslip[]
  vacations           Vacation[]
  enrollments         Enrollment[]
  notifications       Notification[]
  auditLogs           AuditLog[]
  invitationsSent     Invitation[]   @relation("InvitedBy")
  invitationsAccepted Invitation[]   @relation("AcceptedBy")
  managedDepartments  Department[]   @relation("DepartmentManager")

  // Task relations
  assignedTasks  Task[]
  createdTasks   Task[] @relation("CreatedTasks")
  completedTasks Task[] @relation("CompletedTasks")

  // Custom permission system relations
  customRoles      UserCustomRole[]
  userPermissions  UserPermission[]
  permissionCaches PermissionCache[]

  @@index([organizationId])
  @@index([propertyId])
  @@index([departmentId])
}

enum Role {
  PLATFORM_ADMIN // Manages entire platform, all tenants
  ORGANIZATION_OWNER // Manages hotel chain/group
  ORGANIZATION_ADMIN // Manages organization settings
  PROPERTY_MANAGER // Manages individual hotel property
  DEPARTMENT_ADMIN // Manages department within property
  STAFF // Self-service access to own resources
}

model Department {
  id               String            @id @default(cuid())
  name             String
  description      String?
  location         String?
  budget           Decimal?          @db.Decimal(12, 2)
  propertyId       String? // Make nullable for gradual migration
  property         Property?         @relation(fields: [propertyId], references: [id])
  managerId        String?
  manager          User?             @relation("DepartmentManager", fields: [managerId], references: [id])
  parentId         String?
  parent           Department?       @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children         Department[]      @relation("DepartmentHierarchy")
  level            Int               @default(0)
  users            User[]
  documents        Document[]
  invitations      Invitation[]
  trainingSessions TrainingSession[]
  tasks            Task[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // @@unique([propertyId, name]) // Temporarily disabled during migration
  @@index([propertyId])
  @@index([parentId])
  @@index([level])
}

model Document {
  id           String        @id @default(cuid())
  title        String
  description  String?
  fileUrl      String? // Legacy field for backwards compatibility
  fileKey      String? // New field for local storage file paths
  fileSize     Int
  mimeType     String
  scope        DocumentScope
  propertyId   String? // Make nullable for gradual migration
  property     Property?     @relation(fields: [propertyId], references: [id])
  departmentId String?
  department   Department?   @relation(fields: [departmentId], references: [id])
  userId       String?
  user         User?         @relation(fields: [userId], references: [id])
  uploadedBy   String
  tags         String[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?

  @@index([propertyId])
  @@index([departmentId])
  @@index([scope])
}

enum DocumentScope {
  GENERAL
  DEPARTMENT
  USER
}

model Payslip {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  propertyId  String? // Make nullable for gradual migration
  property    Property? @relation(fields: [propertyId], references: [id])
  period      String // "2024-01"
  grossSalary Decimal   @db.Decimal(10, 2)
  deductions  Json
  netSalary   Decimal   @db.Decimal(10, 2)
  currency    String    @default("USD")
  pdfUrl      String? // Legacy field for backwards compatibility
  fileKey     String? // New field for local storage file paths
  importBatch String? // For tracking CSV imports
  createdAt   DateTime  @default(now())
  viewedAt    DateTime?

  // @@unique([userId, period, propertyId]) // Temporarily disabled during migration
  @@unique([userId, period]) // Keep original constraint for now
  @@index([propertyId])
  @@index([period])
  @@index([importBatch])
}

model Vacation {
  id             String         @id @default(cuid())
  userId         String
  user           User           @relation(fields: [userId], references: [id])
  propertyId     String? // Make nullable for gradual migration
  property       Property?      @relation(fields: [propertyId], references: [id])
  type           VacationType
  startDate      DateTime
  endDate        DateTime
  reason         String?
  status         VacationStatus @default(PENDING)
  approvedBy     String?
  approvedAt     DateTime?
  rejectedReason String?
  attachments    String[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([propertyId])
  @@index([userId, status])
  @@index([startDate, endDate])
}

enum VacationType {
  ANNUAL
  SICK
  PERSONAL
  UNPAID
}

enum VacationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model TrainingSession {
  id            String      @id @default(cuid())
  title         String
  description   String
  category      String
  version       Int         @default(1)
  isActive      Boolean     @default(true)
  passingScore  Int?
  duration      Int? // in minutes
  contentBlocks Json // Array of content blocks
  propertyId    String? // Make nullable for gradual migration
  property      Property?   @relation(fields: [propertyId], references: [id])
  departmentId  String? // Optional department-specific training
  department    Department? @relation(fields: [departmentId], references: [id])
  createdBy     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  enrollments Enrollment[]

  // @@unique([propertyId, title, version]) // Temporarily disabled during migration
  @@unique([title, version]) // Keep original constraint for now
  @@index([propertyId])
  @@index([isActive])
  @@index([departmentId])
}

model Enrollment {
  id             String           @id @default(cuid())
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  sessionId      String
  session        TrainingSession  @relation(fields: [sessionId], references: [id])
  status         EnrollmentStatus @default(IN_PROGRESS)
  progress       Json // Track which blocks viewed
  answers        Json? // Store quiz answers
  score          Int?
  completedAt    DateTime?
  certificateUrl String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([userId, sessionId])
  @@index([status])
}

enum EnrollmentStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}

model CommercialBenefit {
  id          String    @id @default(cuid())
  partnerName String
  category    String
  description String    @db.Text
  discount    String
  imageUrl    String?
  websiteUrl  String?
  contactInfo String?
  propertyId  String? // Make nullable for gradual migration
  property    Property? @relation(fields: [propertyId], references: [id])
  validFrom   DateTime?
  validUntil  DateTime?
  isActive    Boolean   @default(true)
  terms       String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([propertyId])
  @@index([isActive, category])
}

model Notification {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  propertyId String? // Make nullable for gradual migration
  property   Property? @relation(fields: [propertyId], references: [id])
  type       String
  title      String
  message    String    @db.Text
  data       Json?
  read       Boolean   @default(false)
  readAt     DateTime?
  createdAt  DateTime  @default(now())

  @@index([propertyId])
  @@index([userId, read])
  @@index([createdAt])
}

model Invitation {
  id            String           @id @default(cuid())
  email         String
  token         String           @unique
  role          Role
  propertyId    String? // Make nullable for gradual migration
  property      Property?        @relation(fields: [propertyId], references: [id])
  departmentId  String?
  department    Department?      @relation(fields: [departmentId], references: [id])
  invitedBy     String
  invitedByUser User             @relation("InvitedBy", fields: [invitedBy], references: [id])
  status        InvitationStatus @default(PENDING)
  expiresAt     DateTime
  acceptedAt    DateTime?
  acceptedBy    String? // User ID when accepted
  acceptedUser  User?            @relation("AcceptedBy", fields: [acceptedBy], references: [id])
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // @@unique([propertyId, email, status]) // Temporarily disabled during migration
  @@unique([email, status]) // Keep original constraint for now
  @@index([propertyId])
  @@index([status])
  @@index([expiresAt])
  @@index([invitedBy])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

model AuditLog {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  propertyId String? // Make nullable for gradual migration
  property   Property? @relation(fields: [propertyId], references: [id])
  action     String
  entity     String
  entityId   String
  oldData    Json?
  newData    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime  @default(now())

  @@index([propertyId])
  @@index([userId])
  @@index([entity, entityId])
  @@index([createdAt])
}

// Core Platform Models for Hotel Operations

model Unit {
  id           String     @id @default(cuid())
  propertyId   String
  property     Property   @relation(fields: [propertyId], references: [id])
  unitNumber   String
  unitType     UnitType   @default(STANDARD)
  building     String?
  floor        Int?
  bedrooms     Int        @default(1)
  bathrooms    Int        @default(1)
  maxOccupancy Int        @default(2)
  size         Decimal?   @db.Decimal(8, 2) // Square feet/meters
  amenities    String[] // WiFi, AC, Balcony, etc.
  status       UnitStatus @default(AVAILABLE)
  isActive     Boolean    @default(true)
  description  String?
  notes        String?
  dailyRate    Decimal?   @db.Decimal(10, 2)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?

  reservations Reservation[]
  tasks        Task[]        @relation("UnitTasks")

  @@unique([propertyId, unitNumber])
  @@index([propertyId])
  @@index([status])
  @@index([isActive])
  @@index([building, floor])
}

enum UnitType {
  STANDARD
  DELUXE
  SUITE
  PRESIDENTIAL
  FAMILY
  ACCESSIBLE
  STUDIO
  APARTMENT
  VILLA
  OTHER
}

enum UnitStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  CLEANING
  OUT_OF_ORDER
  RESERVED
}

model Guest {
  id              String    @id @default(cuid())
  propertyId      String
  property        Property  @relation(fields: [propertyId], references: [id])
  firstName       String
  lastName        String
  email           String?
  phoneNumber     String?
  nationality     String?
  dateOfBirth     DateTime?
  passportNumber  String?
  idNumber        String?
  address         Json? // Structured address object
  preferences     Json? // Dietary, room preferences, etc.
  vipStatus       VipStatus @default(STANDARD)
  notes           String?
  blacklisted     Boolean   @default(false)
  blacklistReason String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  reservations Reservation[]

  @@index([propertyId])
  @@index([email])
  @@index([phoneNumber])
  @@index([vipStatus])
  @@index([blacklisted])
}

enum VipStatus {
  STANDARD
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

model Reservation {
  id                 String            @id @default(cuid())
  propertyId         String
  property           Property          @relation(fields: [propertyId], references: [id])
  unitId             String
  unit               Unit              @relation(fields: [unitId], references: [id])
  guestId            String
  guest              Guest             @relation(fields: [guestId], references: [id])
  reservationNumber  String            @unique
  checkInDate        DateTime
  checkOutDate       DateTime
  adults             Int               @default(1)
  children           Int               @default(0)
  status             ReservationStatus @default(CONFIRMED)
  totalAmount        Decimal           @db.Decimal(10, 2)
  paidAmount         Decimal           @default(0) @db.Decimal(10, 2)
  currency           String            @default("USD")
  paymentStatus      PaymentStatus     @default(PENDING)
  paymentMethod      String?
  specialRequests    String?
  notes              String?
  source             String? // Booking.com, Direct, etc.
  confirmationCode   String?
  checkedInAt        DateTime?
  checkedOutAt       DateTime?
  checkedInBy        String? // User ID
  checkedOutBy       String? // User ID
  cancelledAt        DateTime?
  cancelledBy        String? // User ID
  cancellationReason String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  tasks Task[] @relation("ReservationTasks")

  @@index([propertyId])
  @@index([unitId])
  @@index([guestId])
  @@index([status])
  @@index([checkInDate, checkOutDate])
  @@index([reservationNumber])
  @@index([paymentStatus])
}

enum ReservationStatus {
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  REFUNDED
  CANCELLED
}

model Task {
  id              String       @id @default(cuid())
  propertyId      String
  property        Property     @relation(fields: [propertyId], references: [id])
  title           String
  description     String?
  taskType        TaskType
  priority        TaskPriority @default(MEDIUM)
  status          TaskStatus   @default(PENDING)
  assignedToId    String?
  assignedTo      User?        @relation(fields: [assignedToId], references: [id])
  departmentId    String?
  department      Department?  @relation(fields: [departmentId], references: [id])
  relatedEntity   String? // unit, reservation, guest, etc.
  relatedId       String? // ID of related entity
  unitId          String? // Direct relation to unit
  unit            Unit?        @relation("UnitTasks", fields: [unitId], references: [id])
  reservationId   String? // Direct relation to reservation
  reservation     Reservation? @relation("ReservationTasks", fields: [reservationId], references: [id])
  dueDate         DateTime?
  completedAt     DateTime?
  completedBy     String? // User ID
  completedByUser User?        @relation("CompletedTasks", fields: [completedBy], references: [id])
  estimatedTime   Int? // Minutes
  actualTime      Int? // Minutes
  attachments     String[] // File URLs
  notes           String?
  createdBy       String
  createdByUser   User         @relation("CreatedTasks", fields: [createdBy], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([propertyId])
  @@index([taskType])
  @@index([status])
  @@index([priority])
  @@index([assignedToId])
  @@index([departmentId])
  @@index([dueDate])
  @@index([unitId])
  @@index([reservationId])
  @@index([relatedEntity, relatedId])
}

enum TaskType {
  MAINTENANCE
  HOUSEKEEPING
  FRONT_DESK
  GUEST_REQUEST
  INSPECTION
  REPAIR
  PREVENTIVE
  CLEANING
  CHECKIN
  CHECKOUT
  OTHER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

// ============================================================================
// FLEXIBLE PERMISSION SYSTEM MODELS
// ============================================================================
// This system provides granular, multi-tenant permission management that
// complements the existing Role enum for backwards compatibility while
// enabling flexible, tenant-specific role customization.

// Custom roles defined by tenants (organizations/properties)
model CustomRole {
  id             String        @id @default(cuid())
  name           String // e.g., "Night Manager", "Guest Relations", "Senior Housekeeper"
  description    String?
  organizationId String? // Organization-level role (null for property-specific)
  organization   Organization? @relation(fields: [organizationId], references: [id])
  propertyId     String? // Property-specific role (null for organization-wide)
  property       Property?     @relation(fields: [propertyId], references: [id])
  isActive       Boolean       @default(true)
  isSystemRole   Boolean       @default(false) // System-defined vs tenant-defined
  priority       Int           @default(0) // Higher priority roles override lower ones
  metadata       Json? // Additional role configuration
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?

  // Relations
  permissions RolePermission[]
  userRoles   UserCustomRole[]

  // Ensure unique role names per tenant (handle nulls for system roles)
  @@unique([organizationId, name], name: "unique_org_role")
  @@unique([propertyId, name], name: "unique_property_role")
  @@index([organizationId])
  @@index([propertyId])
  @@index([isActive])
  @@index([priority])
}

// Individual permissions with resource.action.scope format
model Permission {
  id          String   @id @default(cuid())
  resource    String // e.g., "user", "payslip", "training", "reservation", "unit"
  action      String // e.g., "create", "read", "update", "delete", "approve", "assign"
  scope       String // e.g., "own", "department", "property", "organization", "all"
  name        String // Human-readable name: "Create Department Users"
  description String? // Detailed description of what this permission allows
  category    String? // e.g., "HR", "Operations", "Finance", "Admin"
  isSystem    Boolean  @default(true) // System vs custom permissions
  metadata    Json? // Additional permission configuration
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
  conditions      PermissionCondition[]

  // Ensure unique permission combinations
  @@unique([resource, action, scope])
  @@index([resource])
  @@index([action])
  @@index([scope])
  @@index([category])
  @@index([isSystem])
}

// Maps custom roles to their permissions
model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  role         CustomRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  granted      Boolean    @default(true) // Allow explicit deny permissions
  conditions   Json? // Conditional permission rules (time-based, etc.)
  metadata     Json? // Additional grant configuration
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@index([granted])
}

// Individual user permission overrides
model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  granted      Boolean    @default(true)  // Allow explicit deny permissions
  grantedBy    String?    // User ID who granted this permission
  conditions   Json?      // User-specific permission conditions
  expiresAt    DateTime?  // Optional permission expiration
  isActive     Boolean    @default(true)
  metadata     Json?      // Additional permission metadata
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  @@unique([userId, permissionId])
  @@index([userId])
  @@index([permissionId])
  @@index([granted])
  @@index([isActive])
  @@index([expiresAt])
}

// Assigns custom roles to users
model UserCustomRole {
  id         String     @id @default(cuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId     String
  role       CustomRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedBy String? // User ID who assigned this role
  assignedAt DateTime   @default(now())
  expiresAt  DateTime? // Optional role expiration
  isActive   Boolean    @default(true)
  conditions Json? // User-specific conditions for this role
  metadata   Json? // Additional assignment metadata
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@index([isActive])
  @@index([expiresAt])
}

// Conditional permission rules for dynamic permission evaluation
model PermissionCondition {
  id            String     @id @default(cuid())
  permissionId  String
  permission    Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  conditionType String // "time", "location", "resource_owner", "department_member", etc.
  operator      String // "equals", "contains", "greater_than", "in_list", etc.
  value         Json // Condition value(s) - flexible JSON structure
  isActive      Boolean    @default(true)
  description   String? // Human-readable condition description
  metadata      Json? // Additional condition configuration
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([permissionId])
  @@index([conditionType])
  @@index([isActive])
}

// Performance optimization: cached permission evaluations
model PermissionCache {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String? // Scope of cached permissions
  propertyId     String? // Property-specific cache
  resource       String // Cached resource type
  action         String // Cached action
  scope          String // Cached scope
  allowed        Boolean // Whether permission is granted
  conditions     Json? // Evaluated conditions at cache time
  cacheKey       String // Unique cache identifier
  expiresAt      DateTime // Cache expiration
  metadata       Json? // Additional cache metadata
  createdAt      DateTime @default(now())

  // Ensure unique cache entries
  @@unique([cacheKey])
  @@unique([userId, organizationId, propertyId, resource, action, scope])
  @@index([userId])
  @@index([organizationId])
  @@index([propertyId])
  @@index([resource, action, scope])
  @@index([expiresAt])
  @@index([allowed])
}
